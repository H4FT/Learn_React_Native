{"version":3,"sources":["TextInputAdornment.tsx"],"names":["getAdornmentConfig","left","right","adornmentConfig","side","AdornmentSide","Left","adornment","Right","forEach","React","isValidElement","type","TextInputAffix","AdornmentType","Affix","TextInputIcon","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","inputOffset","length","adornmentStyleAdjustmentForNativeInput","map","isWeb","Platform","OS","isLeftSide","offset","ADORNMENT_OFFSET","paddingKey","captalize","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","inputAdornmentComponent","commonProps","key","testID"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './Icon';\nimport TextInputAffix, { AffixAdornment } from './Affix';\nimport { ADORNMENT_OFFSET } from '../constants';\nimport {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n  Platform,\n} from 'react-native';\nimport {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  inputOffset = 0,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isWeb = Platform.OS !== 'ios' && Platform.OS !== 'android';\n        const isLeftSide = side === AdornmentSide.Left;\n        const offset =\n          (isLeftSide ? leftAffixWidth : rightAffixWidth) + ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n\n        if (isWeb) return { [paddingKey]: offset };\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\n      (mergedStyles, currentStyle) => {\n        return {\n          ...mergedStyles,\n          ...currentStyle,\n        };\n      },\n      {}\n    );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]}