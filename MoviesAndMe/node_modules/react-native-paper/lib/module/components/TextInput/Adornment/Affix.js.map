{"version":3,"sources":["Affix.tsx"],"names":["AFFIX_OFFSET","AffixContext","React","createContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","affix","onLayout","visible","TextInputAffix","text","theme","useContext","textColor","colors","alpha","dark","rgb","string","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","StyleSheet","create","position","justifyContent","alignItems"],"mappings":"+SAAA,oDACA,oDACA,yCASA,8CAEA,8B,sGAEA,GAAMA,CAAAA,YAAY,CAAG,EAArB,CAmBA,GAAMC,CAAAA,YAAY,CAAGC,eAAMC,aAAN,CAAkC,CACrDC,SAAS,CAAE,CAAEC,UAAU,CAAE,EAAd,CAAkBC,KAAK,CAAE,EAAzB,CAD0C,CAErDC,WAAW,CAAE,IAFwC,CAGrDC,IAAI,CAAEC,qBAAcC,IAHiC,CAAlC,CAArB,CAMO,GAAMC,CAAAA,cAGI,CAAG,QAHPA,CAAAA,cAGO,MAOd,IANJC,CAAAA,KAMI,MANJA,KAMI,CALJJ,IAKI,MALJA,IAKI,CAJJJ,SAII,MAJJA,SAII,CAHJG,WAGI,MAHJA,WAGI,CAFJM,QAEI,MAFJA,QAEI,CADJC,OACI,MADJA,OACI,CACJ,MACE,8BAAC,YAAD,CAAc,QAAd,EACE,KAAK,CAAE,CACLN,IAAI,CAAJA,IADK,CAELJ,SAAS,CAATA,SAFK,CAGLG,WAAW,CAAXA,WAHK,CAILM,QAAQ,CAARA,QAJK,CAKLC,OAAO,CAAPA,OALK,CADT,iDASGF,KATH,CADF,CAaD,CAxBM,C,sCA0BP,GAAMG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,OAA4B,IAAzBC,CAAAA,IAAyB,OAAzBA,IAAyB,CAAnBC,KAAmB,OAAnBA,KAAmB,uBACWf,eAAMgB,UAAN,CAC1DjB,YAD0D,CADX,CACzCG,SADyC,mBACzCA,SADyC,CAC9BS,QAD8B,mBAC9BA,QAD8B,CACpBN,WADoB,mBACpBA,WADoB,CACPC,IADO,mBACPA,IADO,CACDM,OADC,mBACDA,OADC,CAIjD,GAAMK,CAAAA,SAAS,CAAG,mBAAMF,KAAK,CAACG,MAAN,CAAaJ,IAAnB,EACfK,KADe,CACTJ,KAAK,CAACK,IAAN,CAAa,GAAb,CAAmB,IADV,EAEfC,GAFe,GAGfC,MAHe,EAAlB,CAKA,GAAMC,CAAAA,KAAK,+BACTC,GAAG,CAAEnB,WADI,EAERC,IAFQ,CAEDR,YAFC,CAAX,CAKA,MACE,8BAAC,qBAAD,CAAU,IAAV,EACE,KAAK,CAAE,CACL2B,MAAM,CAACC,SADF,CAELH,KAFK,CAGL,CACEI,OAAO,CACL,CAAAf,OAAO,OAAP,EAAAA,OAAO,SAAP,QAAAA,OAAO,CAAEgB,WAAT,CAAqB,CACnBC,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADO,CAEnBC,WAAW,CAAE,CAAC,CAAD,CAAI,CAAJ,CAFM,CAArB,IAGM,CALV,CAHK,CADT,CAYE,QAAQ,CAAEnB,QAZZ,iDAcE,6BAAC,iBAAD,EAAM,KAAK,CAAE,CAAC,CAAEP,KAAK,CAAEa,SAAT,CAAD,CAAuBf,SAAvB,CAAb,iDAAiDY,IAAjD,CAdF,CADF,CAkBD,CAhCD,C,sCAiCAD,cAAc,CAACkB,WAAf,CAA6B,iBAA7B,CAEA,GAAMN,CAAAA,MAAM,CAAGO,wBAAWC,MAAX,CAAkB,CAC/BP,SAAS,CAAE,CACTQ,QAAQ,CAAE,UADD,CAETC,cAAc,CAAE,QAFP,CAGTC,UAAU,CAAE,QAHH,CADoB,CAAlB,CAAf,C,aAQe,uBAAUvB,cAAV,C","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { Theme } from '../../../types';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nexport const AffixAdornment: React.FunctionComponent<{\n  affix: React.ReactNode;\n  testID: string;\n} & ContextState> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\nconst TextInputAffix = ({ text, theme }: Props) => {\n  const { textStyle, onLayout, topPosition, side, visible } = React.useContext(\n    AffixContext\n  );\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const style = {\n    top: topPosition,\n    [side]: AFFIX_OFFSET,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix };\n"]}