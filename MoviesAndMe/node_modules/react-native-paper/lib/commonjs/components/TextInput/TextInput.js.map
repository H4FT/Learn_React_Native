{"version":3,"sources":["TextInput.tsx"],"names":["BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","props","value","undefined","defaultValue","labeled","Animated","Value","validInputValue","error","focused","placeholder","labelLayout","measured","width","height","leftLayout","rightLayout","timer","clearTimeout","setTimeout","setState","scale","theme","animation","timing","state","toValue","duration","useNativeDriver","Platform","select","ios","default","start","showPlaceholder","event","nativeEvent","layout","args","disabled","editable","onFocus","onBlur","onChangeText","e","root","focus","prevProps","prevState","isFocusChanged","isValueChanged","isLabelLayoutChanged","isLabelChanged","label","isErrorChanged","minimizeLabel","restoreLabel","hidePlaceholder","showError","hideError","setNativeProps","isFocused","clear","blur","mode","rest","ref","handleFocus","forceFocus","handleBlur","handleChangeText","handleLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","nextProps","React","Component","TextInputIcon","TextInputAffix","dense","multiline","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  Platform,\n  LayoutChangeEvent,\n} from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon from './Adornment/Icon';\nimport TextInputAffix from './Adornment/Affix';\nimport { withTheme } from '../../core/theming';\nimport { RenderProps, State } from './types';\nimport { Theme, $Omit } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text to use for the floating label.\n   */\n  label?: string;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `heigh` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: any;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     text: ''\n *   };\n *\n *   render(){\n *     return (\n *       <TextInput\n *         label='Email'\n *         value={this.state.text}\n *         onChangeText={text => this.setState({ text })}\n *       />\n *     );\n *   }\n * }\n * ```\n *\n * @extends TextInput props https://facebook.github.io/react-native/docs/textinput.html#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  // @component ./Adornment/Icon.tsx\n  static Icon = TextInputIcon;\n\n  // @component ./Adornment/Affix.tsx\n  static Affix = TextInputAffix;\n\n  static defaultProps: Partial<TextInputProps> = {\n    mode: 'flat',\n    dense: false,\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n  validInputValue =\n    this.props.value !== undefined ? this.props.value : this.props.defaultValue;\n\n  state = {\n    labeled: new Animated.Value(this.validInputValue ? 0 : 1),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: '',\n    value: this.validInputValue,\n    labelLayout: {\n      measured: false,\n      width: 0,\n      height: 0,\n    },\n    leftLayout: {\n      width: null,\n      height: null,\n    },\n    rightLayout: {\n      width: null,\n      height: null,\n    },\n  };\n\n  ref: NativeTextInput | undefined | null;\n\n  componentDidUpdate(prevProps: TextInputProps, prevState: State) {\n    const isFocusChanged = prevState.focused !== this.state.focused;\n    const isValueChanged = prevState.value !== this.state.value;\n    const isLabelLayoutChanged =\n      prevState.labelLayout !== this.state.labelLayout;\n    const isLabelChanged = prevProps.label !== this.props.label;\n    const isErrorChanged = prevProps.error !== this.props.error;\n\n    if (\n      isFocusChanged ||\n      isValueChanged ||\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      isLabelLayoutChanged\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (isFocusChanged || isLabelChanged) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (isErrorChanged) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  private showPlaceholder = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    // @ts-ignore\n    this.timer = setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    );\n  };\n\n  private hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  private timer?: number;\n  private root: NativeTextInput | undefined | null;\n\n  private showError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start(this.showPlaceholder);\n  };\n\n  private hideError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private restoreLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private minimizeLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      leftLayout: {\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      },\n    });\n  };\n\n  private onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      rightLayout: {\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      },\n    });\n  };\n\n  private handleFocus = (args: any) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(args);\n    }\n  };\n\n  private handleBlur = (args: Object) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(args);\n    }\n  };\n\n  private handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      },\n    });\n  };\n\n  forceFocus = () => {\n    return this.root?.focus();\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n  render() {\n    const { mode, ...rest } = this.props as $Omit<TextInputProps, 'ref'>;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={ref => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={ref => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    );\n  }\n}\n\nexport default withTheme(TextInput);\n"]}